from telegram import Update, InlineKeyboardButton, KeyboardButton
from telegram.ext import CommandHandler, ContextTypes, CallbackQueryHandler, InlineQueryHandler
import datetime
from spy import *
from play import *
from keyboards import *
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler
from time import sleep
from game import *
from random import randint
from datetime import datetime
import requests
game = Game()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start(update: Update, context: InlineKeyboardButton):
    keyboard = [
        [
            InlineKeyboardButton("option1", callback_data="1"),
            InlineKeyboardButton("option2", callback_data="2"),
        ],
        InlineKeyboardButton("option3", callback_data="3"),
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=reply_markup)


async def hi_commands(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    log(update, context)
    await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç! üëã, {update.effective_user.first_name}')
    botcommand = ['/NY - —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞',
                  '/time - —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è',
                  '/sum - —Å—É–º–º–∞ –¥–≤—É—Ö —á–∏—Å–µ–ª',
                  '/GAME - –∏–≥—Ä–∞ 50 —Å–ø–∏—á–µ–∫',
                  '/AURORA - –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—è—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π']
    await update.message.reply_text('–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n{}'.format('\n'.join(botcommand)))

def get_aurora():
    """–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—è—Ä–Ω—ã—Ö —Å–∏—è–Ω–∏–π
    https://services.swpc.noaa.gov/"""
    try:
        p = requests.get("https://services.swpc.noaa.gov/images/aurora-forecast-northern-hemisphere.jpg")
        out = open("aurora.jpg", "wb")
        out.write(p.content)
        out.close()
    except:
        return(None)
    return("aurora.jpg")

async def help_commands(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    log(update, context)
    await update.message.reply_text(f'/hello\n/time\n/sum\n/rule - –∫–æ–Ω—Ñ–µ—Ç—ã\n/xo - –∫—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏\n')


async def play_commands(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    log(update, context)
    await update.message.reply_text(f'')


async def days_to_NY_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.today()
    NY = datetime(2024, 1, 1)
    d = NY-now
    await update.message.reply_text(f'–î–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {d.days}.')


async def time_commands(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    log(update, context)
    await update.message.reply_text(f'{datetime.now().time()}')


async def sum_commands(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    mess = update.message.text
    items = mess.split()
    a = int(items[1])
    b = int(items[2])
    await update.message.reply_text(a+b)


async def callback_commands(update: Update, callback: CallbackQueryHandler) -> None:
    if callback.data == "like":
        await callback.answer("–í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å")


async def message_processing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—ã—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ —á–∞—Ç–µ"""
    if update.message.text[0] != '/':
        if game.gamestatus:
            # –∑–∞–ø—É—â–µ–Ω–∞ –∏–≥—Ä–∞
            # —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
            try:
                matches = int(update.message.text)
            except:
                await update.message.reply_text('–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –æ—Ç–≤–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä–æ–π, —Å–∫–æ–ª—å–∫–æ –≤—ã –±–µ—Ä–µ—Ç–µ —Å–ø–∏—á–µ–∫.')
                return
            if not 0 < matches < 9:
                await update.message.reply_text('–º–æ–∂–Ω–æ –±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç 1 –¥–æ 8 —Å–ø–∏—á–µ–∫')
                return
            game.action_player(matches)
            if game.check_game_state():
                await update.message.reply_text('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤–∞—Å, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏')
                game.stop()
                return
            message = f'–ù–∞ —Å—Ç–æ–ª–µ {game.heap} —Å–ø–∏—á–µ–∫.'
            await update.message.reply_text(message)
            sleep(1)
            # —Ö–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
            message = f'–Ø –≤–∑—è–ª {game.action_cpu()} —Å–ø–∏—á–µ–∫\n'
            await update.message.reply_text(message)
            message = f'–ù–∞ —Å—Ç–æ–ª–µ {game.heap} —Å–ø–∏—á–µ–∫.'
            await update.message.reply_text(message)
            sleep(1)
            if game.check_game_state():
                message = f'–Ø –≤—ã–∏–≥—Ä–∞–ª'
                await update.message.reply_text(message)
                game.stop()
                return
            message = '–í–∞—à —Ö–æ–¥'
            await update.message.reply_text(message)
            return


async def gamestart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã"""
    if not game.gamestatus:
        game.start()
        message = game.help
        await update.message.reply_text(message)
        message = f'–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å.\n–ù–∞ —Å—Ç–æ–ª–µ {game.heap} —Å–ø–∏—á–µ–∫\n'
        if randint(1, 100) > 50:
            message = '–Ø —Ö–æ–∂—É –ø–µ—Ä–≤—ã–π\n'
            message += f'–Ø –≤–∑—è–ª {game.action_cpu()}\n'
            message += f'–û—Å—Ç–∞–ª–æ—Å—å {game.heap}\n–í–∞—à —Ö–æ–¥'
            await update.message.reply_text(message)
        else:
            message = '–í–∞—à —Ö–æ–¥'
            await update.message.reply_text(message)


async def getaurora(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    aurora = get_aurora()
    if aurora == None:
        await update.message.reply_text('–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã')
        return
    await update.message.reply_photo(aurora)


async def xo_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    mess = update.message.text.split()

    await update.message.reply_text(showMatrix())
    await update.message.reply_text(int(mess[1]))
    await update.message.reply_text(player(int(mess[1])))
    await update.message.reply_text(showMatrix())
